
/*
========================================================================================
  Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
includeConfig 'conf/base.config'
params {

    // Boilerplate options
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    // Max requirements
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
} 

profiles {
    secure_lustre {
        process.executor = 'local'
        
        params {
        reference_genome = "/lustre/scratch124/jb63/ascat/GRCh38_full_analysis_set_plus_decoy_hla.fa"
        bait_set = "/lustre/scratch124/jb63/ascat/GRCh38_WES5_canonical_pad100.merged.bed"
        resource_files = "/lustre/scratch124/jb63/ascat/resources/1000G_loci_hg38_chr"
        gc_file = "/lustre/scratch124/jb63/ascat/resources/1000G_GC_exome_chr.txt"
        rt_file = "/lustre/scratch124/jb63/ascat/resources/1000G_RT_exome_chr.txt"
        gistic_refgene_file = "/lustre/scratch124/jb63/ascat/hg38.UCSC.add_miR.160920.refgene.mat"
        difficult_regions_file = "/lustre/scratch124/jb63/ascat/resources/GRCh38_alldifficultregions.bed"
        }

        docker {
        enabled = true
        runOptions = '-u $(id -u):$(id -g) -v /workspaces/ascat:/workspaces/ascat'
        }

        singularity {
            enabled    = false
            autoMounts = false
        }
    }

    farm22 {
        process.executor = 'lsf'
        singularity.runOptions = "--bind /lustre"

        docker {
        enabled = false
        }
        singularity {
            enabled    = true
            autoMounts = true
            registry = 'gitlab-registry.internal.sanger.ac.uk'
            username = System.getenv('SINGULARITY_DOCKER_USERNAME')
            password = System.getenv('SINGULARITY_DOCKER_PASSWORD')
        }
        executor {
            name = 'lsf'
            perJobMemLimit = true
            poolSize = 4
            submitRateLimit = '5 sec'
            killBatchSize = 50
        }
        process {
            withName: RUN_ASCAT_EXOMES {
            cpus = 18
            memory = 40.GB
            }
            }
        params {
            reference_genome = "/lustre/scratch124/casm/team113/ref/human/GRCh38/GRCh38_full_analysis_set_plus_decoy_hla.fa"
            bait_set = "/lustre/scratch125/casm/team113da/projects/DERMATLAS/metadata/references/baitset/DNA/GRCh38_WES5_canonical_pad100.merged.bed"
            resource_files = "/lustre/scratch124/casm/team113/secure-lustre/jb63/ascat/resources/1000G_loci_hg38_chr"
            gc_file = "/lustre/scratch124/casm/team113/secure-lustre/jb63/ascat/resources/1000G_GC_exome_chr.txt"
            rt_file = "/lustre/scratch124/casm/team113/secure-lustre/jb63/ascat/resources/1000G_RT_exome_chr.txt"
            gistic_refgene_file = "/lustre/scratch124/casm/team113/secure-lustre/jb63/ascat/hg38.UCSC.add_miR.160920.refgene.mat"
            difficult_regions_file = "/lustre/scratch124/casm/team113/secure-lustre/jb63/ascat/resources/GRCh38_alldifficultregions.bed"
            }
        }
}



    def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
    tracedir = "pipeline_info"

report {
    enabled = true
    file    = "execution_report_${trace_timestamp}.html"
}


manifest {
    name            = 'dermatlas_cna'
    author          = 'Kim Wong, Jamie Billington'
    homePage        = 'https://gitlab.internal.sanger.ac.uk/DERMATLAS/analysis-methods/dermatlas_copy_number_nf'
    description     = 'Copy Number analysis pipeline for Dermatlas'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.04.5'
    version         = '1.0.0'
    defaultBranch   = 'develop'
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}